// Code generated for kirillmc
// Â© kirillmc 2025
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kirillmc/starShipsCompany/payment/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Pay provides a mock function with given fields: _a0, _a1
func (_m *Service) Pay(_a0 context.Context, _a1 *model.PayOrderInfo) model.TransactionUUID {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 model.TransactionUUID
	if rf, ok := ret.Get(0).(func(context.Context, *model.PayOrderInfo) model.TransactionUUID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.TransactionUUID)
	}

	return r0
}

// Service_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type Service_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *model.PayOrderInfo
func (_e *Service_Expecter) Pay(_a0 interface{}, _a1 interface{}) *Service_Pay_Call {
	return &Service_Pay_Call{Call: _e.mock.On("Pay", _a0, _a1)}
}

func (_c *Service_Pay_Call) Run(run func(_a0 context.Context, _a1 *model.PayOrderInfo)) *Service_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.PayOrderInfo))
	})
	return _c
}

func (_c *Service_Pay_Call) Return(_a0 model.TransactionUUID) *Service_Pay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Pay_Call) RunAndReturn(run func(context.Context, *model.PayOrderInfo) model.TransactionUUID) *Service_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
