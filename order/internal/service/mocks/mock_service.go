// Code generated for kirillmc
// Â© kirillmc 2025
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kirillmc/starShipsCompany/order/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, params
func (_m *Service) Cancel(ctx context.Context, params model.CancelOrderParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CancelOrderParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type Service_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.CancelOrderParams
func (_e *Service_Expecter) Cancel(ctx interface{}, params interface{}) *Service_Cancel_Call {
	return &Service_Cancel_Call{Call: _e.mock.On("Cancel", ctx, params)}
}

func (_c *Service_Cancel_Call) Run(run func(ctx context.Context, params model.CancelOrderParams)) *Service_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CancelOrderParams))
	})
	return _c
}

func (_c *Service_Cancel_Call) Return(_a0 error) *Service_Cancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Cancel_Call) RunAndReturn(run func(context.Context, model.CancelOrderParams) error) *Service_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, userUUID, partsUUIDs
func (_m *Service) Create(ctx context.Context, userUUID model.UserUUID, partsUUIDs []model.PartUUID) (model.OrderInfo, error) {
	ret := _m.Called(ctx, userUUID, partsUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.OrderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserUUID, []model.PartUUID) (model.OrderInfo, error)); ok {
		return rf(ctx, userUUID, partsUUIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserUUID, []model.PartUUID) model.OrderInfo); ok {
		r0 = rf(ctx, userUUID, partsUUIDs)
	} else {
		r0 = ret.Get(0).(model.OrderInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserUUID, []model.PartUUID) error); ok {
		r1 = rf(ctx, userUUID, partsUUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Service_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID model.UserUUID
//   - partsUUIDs []model.PartUUID
func (_e *Service_Expecter) Create(ctx interface{}, userUUID interface{}, partsUUIDs interface{}) *Service_Create_Call {
	return &Service_Create_Call{Call: _e.mock.On("Create", ctx, userUUID, partsUUIDs)}
}

func (_c *Service_Create_Call) Run(run func(ctx context.Context, userUUID model.UserUUID, partsUUIDs []model.PartUUID)) *Service_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserUUID), args[2].([]model.PartUUID))
	})
	return _c
}

func (_c *Service_Create_Call) Return(_a0 model.OrderInfo, _a1 error) *Service_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Create_Call) RunAndReturn(run func(context.Context, model.UserUUID, []model.PartUUID) (model.OrderInfo, error)) *Service_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, params
func (_m *Service) Get(ctx context.Context, params model.GetOrderParams) (model.Order, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetOrderParams) (model.Order, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetOrderParams) model.Order); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetOrderParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Service_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.GetOrderParams
func (_e *Service_Expecter) Get(ctx interface{}, params interface{}) *Service_Get_Call {
	return &Service_Get_Call{Call: _e.mock.On("Get", ctx, params)}
}

func (_c *Service_Get_Call) Run(run func(ctx context.Context, params model.GetOrderParams)) *Service_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GetOrderParams))
	})
	return _c
}

func (_c *Service_Get_Call) Return(_a0 model.Order, _a1 error) *Service_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Get_Call) RunAndReturn(run func(context.Context, model.GetOrderParams) (model.Order, error)) *Service_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Pay provides a mock function with given fields: ctx, params
func (_m *Service) Pay(ctx context.Context, params model.PayOrderParams) (model.TransactionUUID, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 model.TransactionUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PayOrderParams) (model.TransactionUUID, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PayOrderParams) model.TransactionUUID); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(model.TransactionUUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PayOrderParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type Service_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.PayOrderParams
func (_e *Service_Expecter) Pay(ctx interface{}, params interface{}) *Service_Pay_Call {
	return &Service_Pay_Call{Call: _e.mock.On("Pay", ctx, params)}
}

func (_c *Service_Pay_Call) Run(run func(ctx context.Context, params model.PayOrderParams)) *Service_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.PayOrderParams))
	})
	return _c
}

func (_c *Service_Pay_Call) Return(_a0 model.TransactionUUID, _a1 error) *Service_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Pay_Call) RunAndReturn(run func(context.Context, model.PayOrderParams) (model.TransactionUUID, error)) *Service_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, params
func (_m *Service) Update(ctx context.Context, params model.UpdateOrderParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateOrderParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Service_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.UpdateOrderParams
func (_e *Service_Expecter) Update(ctx interface{}, params interface{}) *Service_Update_Call {
	return &Service_Update_Call{Call: _e.mock.On("Update", ctx, params)}
}

func (_c *Service_Update_Call) Run(run func(ctx context.Context, params model.UpdateOrderParams)) *Service_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UpdateOrderParams))
	})
	return _c
}

func (_c *Service_Update_Call) Return(_a0 error) *Service_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Update_Call) RunAndReturn(run func(context.Context, model.UpdateOrderParams) error) *Service_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
