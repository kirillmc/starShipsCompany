// Code generated for kirillmc
// Â© kirillmc 2025
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kirillmc/starShipsCompany/order/internal/model"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// OrderPartRepository is an autogenerated mock type for the OrderPartRepository type
type OrderPartRepository struct {
	mock.Mock
}

type OrderPartRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderPartRepository) EXPECT() *OrderPartRepository_Expecter {
	return &OrderPartRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, tx, orderID, partUUIDs
func (_m *OrderPartRepository) Create(ctx context.Context, tx pgx.Tx, orderID model.OrderID, partUUIDs []model.PartUUID) error {
	ret := _m.Called(ctx, tx, orderID, partUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, model.OrderID, []model.PartUUID) error); ok {
		r0 = rf(ctx, tx, orderID, partUUIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderPartRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderPartRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - orderID model.OrderID
//   - partUUIDs []model.PartUUID
func (_e *OrderPartRepository_Expecter) Create(ctx interface{}, tx interface{}, orderID interface{}, partUUIDs interface{}) *OrderPartRepository_Create_Call {
	return &OrderPartRepository_Create_Call{Call: _e.mock.On("Create", ctx, tx, orderID, partUUIDs)}
}

func (_c *OrderPartRepository_Create_Call) Run(run func(ctx context.Context, tx pgx.Tx, orderID model.OrderID, partUUIDs []model.PartUUID)) *OrderPartRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(model.OrderID), args[3].([]model.PartUUID))
	})
	return _c
}

func (_c *OrderPartRepository_Create_Call) Return(_a0 error) *OrderPartRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderPartRepository_Create_Call) RunAndReturn(run func(context.Context, pgx.Tx, model.OrderID, []model.PartUUID) error) *OrderPartRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, orderID
func (_m *OrderPartRepository) Index(ctx context.Context, orderID model.OrderID) ([]model.PartUUID, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []model.PartUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderID) ([]model.PartUUID, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderID) []model.PartUUID); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PartUUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderPartRepository_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type OrderPartRepository_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID model.OrderID
func (_e *OrderPartRepository_Expecter) Index(ctx interface{}, orderID interface{}) *OrderPartRepository_Index_Call {
	return &OrderPartRepository_Index_Call{Call: _e.mock.On("Index", ctx, orderID)}
}

func (_c *OrderPartRepository_Index_Call) Run(run func(ctx context.Context, orderID model.OrderID)) *OrderPartRepository_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderID))
	})
	return _c
}

func (_c *OrderPartRepository_Index_Call) Return(_a0 []model.PartUUID, _a1 error) *OrderPartRepository_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderPartRepository_Index_Call) RunAndReturn(run func(context.Context, model.OrderID) ([]model.PartUUID, error)) *OrderPartRepository_Index_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderPartRepository creates a new instance of OrderPartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderPartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderPartRepository {
	mock := &OrderPartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
