// Code generated for kirillmc
// Â© kirillmc 2025
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kirillmc/starShipsCompany/order/internal/model"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, tx, order
func (_m *OrderRepository) Create(ctx context.Context, tx pgx.Tx, order model.CreateOrder) (model.OrderInfo, error) {
	ret := _m.Called(ctx, tx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.OrderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, model.CreateOrder) (model.OrderInfo, error)); ok {
		return rf(ctx, tx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, model.CreateOrder) model.OrderInfo); ok {
		r0 = rf(ctx, tx, order)
	} else {
		r0 = ret.Get(0).(model.OrderInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, model.CreateOrder) error); ok {
		r1 = rf(ctx, tx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - order model.CreateOrder
func (_e *OrderRepository_Expecter) Create(ctx interface{}, tx interface{}, order interface{}) *OrderRepository_Create_Call {
	return &OrderRepository_Create_Call{Call: _e.mock.On("Create", ctx, tx, order)}
}

func (_c *OrderRepository_Create_Call) Run(run func(ctx context.Context, tx pgx.Tx, order model.CreateOrder)) *OrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(model.CreateOrder))
	})
	return _c
}

func (_c *OrderRepository_Create_Call) Return(_a0 model.OrderInfo, _a1 error) *OrderRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Create_Call) RunAndReturn(run func(context.Context, pgx.Tx, model.CreateOrder) (model.OrderInfo, error)) *OrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrderParts provides a mock function with given fields: ctx, tx, orderID, partUUIDs
func (_m *OrderRepository) CreateOrderParts(ctx context.Context, tx pgx.Tx, orderID model.OrderID, partUUIDs []model.PartUUID) error {
	ret := _m.Called(ctx, tx, orderID, partUUIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderParts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, model.OrderID, []model.PartUUID) error); ok {
		r0 = rf(ctx, tx, orderID, partUUIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_CreateOrderParts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrderParts'
type OrderRepository_CreateOrderParts_Call struct {
	*mock.Call
}

// CreateOrderParts is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - orderID model.OrderID
//   - partUUIDs []model.PartUUID
func (_e *OrderRepository_Expecter) CreateOrderParts(ctx interface{}, tx interface{}, orderID interface{}, partUUIDs interface{}) *OrderRepository_CreateOrderParts_Call {
	return &OrderRepository_CreateOrderParts_Call{Call: _e.mock.On("CreateOrderParts", ctx, tx, orderID, partUUIDs)}
}

func (_c *OrderRepository_CreateOrderParts_Call) Run(run func(ctx context.Context, tx pgx.Tx, orderID model.OrderID, partUUIDs []model.PartUUID)) *OrderRepository_CreateOrderParts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(model.OrderID), args[3].([]model.PartUUID))
	})
	return _c
}

func (_c *OrderRepository_CreateOrderParts_Call) Return(_a0 error) *OrderRepository_CreateOrderParts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_CreateOrderParts_Call) RunAndReturn(run func(context.Context, pgx.Tx, model.OrderID, []model.PartUUID) error) *OrderRepository_CreateOrderParts_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, orderUUID
func (_m *OrderRepository) Get(ctx context.Context, orderUUID model.OrderUUID) (model.Order, error) {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderUUID) (model.Order, error)); ok {
		return rf(ctx, orderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderUUID) model.Order); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderUUID) error); ok {
		r1 = rf(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID model.OrderUUID
func (_e *OrderRepository_Expecter) Get(ctx interface{}, orderUUID interface{}) *OrderRepository_Get_Call {
	return &OrderRepository_Get_Call{Call: _e.mock.On("Get", ctx, orderUUID)}
}

func (_c *OrderRepository_Get_Call) Run(run func(ctx context.Context, orderUUID model.OrderUUID)) *OrderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderUUID))
	})
	return _c
}

func (_c *OrderRepository_Get_Call) Return(_a0 model.Order, _a1 error) *OrderRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Get_Call) RunAndReturn(run func(context.Context, model.OrderUUID) (model.Order, error)) *OrderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// IndexOrderParts provides a mock function with given fields: ctx, orderID
func (_m *OrderRepository) IndexOrderParts(ctx context.Context, orderID model.OrderID) ([]model.PartUUID, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for IndexOrderParts")
	}

	var r0 []model.PartUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderID) ([]model.PartUUID, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderID) []model.PartUUID); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PartUUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_IndexOrderParts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexOrderParts'
type OrderRepository_IndexOrderParts_Call struct {
	*mock.Call
}

// IndexOrderParts is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID model.OrderID
func (_e *OrderRepository_Expecter) IndexOrderParts(ctx interface{}, orderID interface{}) *OrderRepository_IndexOrderParts_Call {
	return &OrderRepository_IndexOrderParts_Call{Call: _e.mock.On("IndexOrderParts", ctx, orderID)}
}

func (_c *OrderRepository_IndexOrderParts_Call) Run(run func(ctx context.Context, orderID model.OrderID)) *OrderRepository_IndexOrderParts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderID))
	})
	return _c
}

func (_c *OrderRepository_IndexOrderParts_Call) Return(_a0 []model.PartUUID, _a1 error) *OrderRepository_IndexOrderParts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_IndexOrderParts_Call) RunAndReturn(run func(context.Context, model.OrderID) ([]model.PartUUID, error)) *OrderRepository_IndexOrderParts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, updateOrderParams
func (_m *OrderRepository) UpdateOrder(ctx context.Context, updateOrderParams model.UpdateOrderParams) error {
	ret := _m.Called(ctx, updateOrderParams)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateOrderParams) error); ok {
		r0 = rf(ctx, updateOrderParams)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepository_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type OrderRepository_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - updateOrderParams model.UpdateOrderParams
func (_e *OrderRepository_Expecter) UpdateOrder(ctx interface{}, updateOrderParams interface{}) *OrderRepository_UpdateOrder_Call {
	return &OrderRepository_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, updateOrderParams)}
}

func (_c *OrderRepository_UpdateOrder_Call) Run(run func(ctx context.Context, updateOrderParams model.UpdateOrderParams)) *OrderRepository_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UpdateOrderParams))
	})
	return _c
}

func (_c *OrderRepository_UpdateOrder_Call) Return(_a0 error) *OrderRepository_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepository_UpdateOrder_Call) RunAndReturn(run func(context.Context, model.UpdateOrderParams) error) *OrderRepository_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
