// Code generated for kirillmc
// Â© kirillmc 2025
// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	internalmodel "github.com/kirillmc/starShipsCompany/order/internal/model"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kirillmc/starShipsCompany/order/internal/repository/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, order
func (_m *Repository) Create(ctx context.Context, order model.Order) (internalmodel.OrderInfo, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 internalmodel.OrderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) (internalmodel.OrderInfo, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) internalmodel.OrderInfo); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(internalmodel.OrderInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - order model.Order
func (_e *Repository_Expecter) Create(ctx interface{}, order interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, order)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, order model.Order)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Order))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 internalmodel.OrderInfo, _a1 error) *Repository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, model.Order) (internalmodel.OrderInfo, error)) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, params
func (_m *Repository) Get(ctx context.Context, params model.GetOrderParams) (internalmodel.Order, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 internalmodel.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetOrderParams) (internalmodel.Order, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetOrderParams) internalmodel.Order); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(internalmodel.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetOrderParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - params model.GetOrderParams
func (_e *Repository_Expecter) Get(ctx interface{}, params interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", ctx, params)}
}

func (_c *Repository_Get_Call) Run(run func(ctx context.Context, params model.GetOrderParams)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GetOrderParams))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 internalmodel.Order, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(context.Context, model.GetOrderParams) (internalmodel.Order, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// SetStatus provides a mock function with given fields: ctx, orderUUID, transactionUUID, status
func (_m *Repository) SetStatus(ctx context.Context, orderUUID model.OrderUUID, transactionUUID model.TransactionUUID, status model.OrderStatus) error {
	ret := _m.Called(ctx, orderUUID, transactionUUID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderUUID, model.TransactionUUID, model.OrderStatus) error); ok {
		r0 = rf(ctx, orderUUID, transactionUUID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type Repository_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID model.OrderUUID
//   - transactionUUID model.TransactionUUID
//   - status model.OrderStatus
func (_e *Repository_Expecter) SetStatus(ctx interface{}, orderUUID interface{}, transactionUUID interface{}, status interface{}) *Repository_SetStatus_Call {
	return &Repository_SetStatus_Call{Call: _e.mock.On("SetStatus", ctx, orderUUID, transactionUUID, status)}
}

func (_c *Repository_SetStatus_Call) Run(run func(ctx context.Context, orderUUID model.OrderUUID, transactionUUID model.TransactionUUID, status model.OrderStatus)) *Repository_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderUUID), args[2].(model.TransactionUUID), args[3].(model.OrderStatus))
	})
	return _c
}

func (_c *Repository_SetStatus_Call) Return(_a0 error) *Repository_SetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_SetStatus_Call) RunAndReturn(run func(context.Context, model.OrderUUID, model.TransactionUUID, model.OrderStatus) error) *Repository_SetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
