package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/google/uuid"
	orderV1 "github.com/kirillmc/starShipsCompany/shared/pkg/openapi/order/v1"
	inventoryV1 "github.com/kirillmc/starShipsCompany/shared/pkg/proto/inventory/v1"
	paymentV1 "github.com/kirillmc/starShipsCompany/shared/pkg/proto/payment/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

type Order = orderV1.GetOrderResponse

const (
	httpPort = "8080"
	httpHost = "localhost"

	inventoryServiceAddress = "localhost:50051"
	paymentServiceAddress   = "localhost:50052"
	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	readHeaderTimeout = 5 * time.Second
	shutdownTimeout   = 10 * time.Second
)

// OrderStorage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
type OrderStorage struct {
	mu     sync.RWMutex
	orders map[string]*Order
}

func NewWeatherStorage() *OrderStorage {
	return &OrderStorage{
		orders: make(map[string]*Order),
	}
}

func (s *OrderHandler) CancelOrder(_ context.Context, params orderV1.CancelOrderParams) (orderV1.CancelOrderRes, error) {
	order, err := s.storage.getOrder(params.OrderUUID.String())
	if err != nil {
		return &orderV1.NotFoundError{
			Code:    404,
			Message: err.Error(),
		}, nil
	}

	if order.Status.Value == orderV1.OrderStatusPAID {
		return &orderV1.ConflictError{
			Code:    409,
			Message: "–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω",
		}, nil
	}

	s.storage.setOrderStatus(params.OrderUUID.String(), orderV1.OrderStatusCANCELLED)

	return &orderV1.CancelOrderNoContent{}, nil
}

func (s *OrderHandler) CreateOrder(ctx context.Context, req *orderV1.CreateOrderRequest) (orderV1.CreateOrderRes, error) {
	if req == nil {
		return &orderV1.CreateOrderResponse{}, nil
	}

	inventoryReq := &inventoryV1.ListPartsRequest{Filter: &inventoryV1.PartsFilter{Uuids: req.PartUuids}}
	resp, err := s.inventoryService.ListParts(ctx, inventoryReq)
	if err != nil {
		return &orderV1.InternalServerError{
			Code:    http.StatusInternalServerError,
			Message: fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π: %s", err),
		}, nil
	}
	if len(resp.Parts) < len(req.PartUuids) {
		return &orderV1.InternalServerError{
			Code:    http.StatusInternalServerError,
			Message: "–í –Ω–∞–ª–∏—á–∏–∏ –º–µ–Ω—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è",
		}, nil
	}

	var totalPrice float64
	partsUUIDS := make([]string, 0, len(resp.Parts))

	for _, part := range resp.Parts {
		totalPrice += part.Price
		partsUUIDS = append(partsUUIDS, part.Uuid)
	}

	orderUUID := uuid.NewString()

	s.storage.addOrder(orderUUID, req.UserUUID, partsUUIDS, totalPrice)

	return &orderV1.CreateOrderResponse{
		OrderUUID:  orderUUID,
		TotalPrice: totalPrice,
	}, nil
}

func (s *OrderHandler) GetOrder(_ context.Context, params orderV1.GetOrderParams) (orderV1.GetOrderRes, error) {
	order, err := s.storage.getOrder(params.OrderUUID.String())
	if err != nil {
		return &orderV1.NotFoundError{
			Code:    404,
			Message: err.Error(),
		}, nil
	}

	return order, nil
}

func (s *OrderHandler) PayOrder(ctx context.Context, req *orderV1.PayOrderRequest, params orderV1.PayOrderParams) (orderV1.PayOrderRes, error) {
	if req == nil {
		return &orderV1.PayOrderResponse{}, nil
	}

	order, err := s.storage.getOrder(params.OrderUUID.String())
	if err != nil {
		return &orderV1.NotFoundError{
			Code:    404,
			Message: err.Error(),
		}, nil
	}

	paymentReq := paymentV1.PayOrderRequest{
		OrderUuid:     params.OrderUUID.String(),
		UserUuid:      order.UserUUID,
		PaymentMethod: paymentMethodToPaymentV1(req.PaymentMethod),
	}

	resp, err := s.paymentService.PayOrder(ctx, &paymentReq)
	if err != nil || resp == nil {
		return &orderV1.InternalServerError{
			Code:    http.StatusInternalServerError,
			Message: fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å UUID %s: %s", order.OrderUUID, err),
		}, nil
	}

	s.storage.setOrderStatus(order.OrderUUID, orderV1.OrderStatusPAID)

	return &orderV1.PayOrderResponse{TransactionUUID: resp.TransactionUuid}, nil
}

func paymentMethodToPaymentV1(method orderV1.PaymentMethod) paymentV1.PAYMENTMETHOD {
	switch method {
	case orderV1.PaymentMethodCARD:
		return paymentV1.PAYMENTMETHOD_CARD
	case orderV1.PaymentMethodSBP:
		return paymentV1.PAYMENTMETHOD_SBP
	case orderV1.PaymentMethodCREDITCARD:
		return paymentV1.PAYMENTMETHOD_CREDIT_CARD
	case orderV1.PaymentMethodINVESTORMONEY:
		return paymentV1.PAYMENTMETHOD_INVESTOR_MONEY
	}

	return paymentV1.PAYMENTMETHOD_UNKNOWN
}

// GetWeather –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –ø–æ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞
func (s *OrderStorage) GetWeather(city string) *Order {
	s.mu.RLock()
	defer s.mu.RUnlock()

	weather, ok := s.orders[city]
	if !ok {
		return nil
	}

	return weather
}

func (s *OrderStorage) addOrder(orderUUID, userUUID string, partsUUIDS []string, totalPrice float64) {
	s.mu.Lock()
	defer s.mu.Unlock()

	s.orders[orderUUID] = &Order{
		OrderUUID:       orderUUID,
		UserUUID:        userUUID,
		PartUuids:       partsUUIDS,
		TotalPrice:      orderV1.NewOptFloat64(totalPrice),
		TransactionUUID: orderV1.OptString{},
		PaymentMethod:   orderV1.OptPaymentMethod{},
		Status:          orderV1.NewOptOrderStatus(orderV1.OrderStatusPENDINGPAYMENT),
	}
}

func (s *OrderStorage) setOrderStatus(orderUUID string, status orderV1.OrderStatus) {
	s.mu.Lock()
	defer s.mu.Unlock()

	s.orders[orderUUID].Status = orderV1.NewOptOrderStatus(status)
}

func (s *OrderStorage) getOrder(orderUUID string) (*Order, error) {
	s.mu.RLock()
	defer s.mu.RUnlock()

	if order, ok := s.orders[orderUUID]; ok {
		return order, nil
	}

	return nil, fmt.Errorf("–∑–∞–∫–∞–∑ —Å UUID %s –Ω–µ –Ω–∞–π–¥–µ–Ω", orderUUID)
}

type OrderHandler struct {
	storage          *OrderStorage
	inventoryService inventoryV1.InventoryServiceClient
	paymentService   paymentV1.PaymentServiceClient
}

// NewOrderHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã
func NewOrderHandler(storage *OrderStorage, inventoryService inventoryV1.InventoryServiceClient, paymentService paymentV1.PaymentServiceClient) *OrderHandler {
	return &OrderHandler{
		storage:          storage,
		inventoryService: inventoryService,
		paymentService:   paymentService,
	}
}

// NewError —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ GenericError
func (h *OrderHandler) NewError(_ context.Context, err error) *orderV1.GenericErrorStatusCode {
	return &orderV1.GenericErrorStatusCode{
		StatusCode: http.StatusInternalServerError,
		Response: orderV1.GenericError{
			Code:    orderV1.NewOptInt(http.StatusInternalServerError),
			Message: orderV1.NewOptString(err.Error()),
		},
	}
}

func main() {
	storage := NewWeatherStorage()

	connInventory, err := grpc.NewClient(
		inventoryServiceAddress,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect: %v\n", err)
		return
	}
	defer func() {
		if cerr := connInventory.Close(); cerr != nil {
			log.Printf("failed to close connect: %v", cerr)
		}
	}()
	inventoryClient := inventoryV1.NewInventoryServiceClient(connInventory)

	connPayment, err := grpc.NewClient(
		paymentServiceAddress,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect: %v\n", err)
		return
	}
	defer func() {
		if cerr := connPayment.Close(); cerr != nil {
			log.Printf("failed to close connect: %v", cerr)
		}
	}()
	pymentClient := paymentV1.NewPaymentServiceClient(connPayment)

	orderHandler := NewOrderHandler(storage, inventoryClient, pymentClient)

	// –°–æ–∑–¥–∞–µ–º OpenAPI —Å–µ—Ä–≤–µ—Ä
	orderServer, err := orderV1.NewServer(orderHandler)
	if err != nil {
		log.Printf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ OpenAPI: %v", err)
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä Chi
	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	// r.Use(middleware.Timeout(10 * time.Second))

	// –ú–æ–Ω—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ OpenAPI
	r.Mount("/", orderServer)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	server := &http.Server{
		Addr:              net.JoinHostPort(httpHost, httpPort),
		Handler:           r,
		ReadHeaderTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n", httpPort)
		err = server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	err = server.Shutdown(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
