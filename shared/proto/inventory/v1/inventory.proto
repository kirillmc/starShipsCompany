syntax = "proto3";

// Package inventory.v1 содержит API для работы с сервисом inventory
package inventory.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/kirillmc/starShipsCompany/shared/pkg/proto/inventory/v1;inventory_v1";

// InventoryService - отвечает за хранение и предоставление информации о деталях для сборки космических кораблей
service InventoryService {
  // GetPart возвращает информацию о детали по её UUID
  rpc GetPart(GetPartRequest) returns (GetPartResponse);

  // ListParts - возвращает список деталей с возможностью фильтрации
  rpc ListParts(ListPartsRequest) returns (ListPartsResponse);
}

// GetPartRequest - запрос на получение информацию о детали по её UUID
message GetPartRequest {
  // uuid - идентификатор детали
  string uuid = 1;
}

// GetPartResponse - ответ с информацией о детали космичесокго корабля
message GetPartResponse{
  // part - информация о детали космичесокго корабля
  Part part = 1;
}

// ListPartsRequest - запрос на получение списка деталей с возможностью фильтрации
message ListPartsRequest {
  // filter - фильтр по деталям (все поля опциональны)
  PartsFilter filter = 1;
}

// ListPartsResponse - ответ со списком деталей согласно фильтрации
message ListPartsResponse{
  // parts - список найденных деталей
  repeated Part parts = 1;
}

// Part - структура с информацией о детали космичесокго корабля
message Part{
  // uuid - уникальный идентификатор детали
  string uuid = 1;

  // name - название детали
  string name = 2;

  // description - описание детали
  string description = 3;

  // price - цена за единицу
  double price = 4;

  // stock_quantity - количество на складе
  int64 stock_quantity = 5;

  // category - категория
  CATEGORY category = 6;

  // dimensions - размеры детали
  Dimensions dimensions = 7;

  // manufacturer - информация о производителе
  Manufacturer manufacturer = 8;

  // tags - теги для быстрого поиска
  repeated string tags = 9;

  // metadata - гибкие метаданные
  map <string, Value> metadata = 10;

  // created_at - дата создания
  google.protobuf.Timestamp created_at = 11;

  // updated_at - дата обновления
  google.protobuf.Timestamp updated_at = 12;
}

// Category - перечисление
enum CATEGORY{
  // UNKNOWN - неизвестная категория
  UNKNOWN = 0;

  // ENGINE - двигатель
  ENGINE = 1;

  // FUEL - топливо
  FUEL = 2;

  // PORTHOLE - иллюминатор
  PORTHOLE = 3;

  // WING - крыло
  WING = 4;
}

// Dimensions - структура размеров детали
message Dimensions{
  // length - длина в см
  double length = 1;

  // width - ширина в см
  double width = 2;

  // height - высота в см
  double height = 3;

  // weight - вес в кг
  double weight = 4;
}

// Manufacturer - структура с информацией о производителе
message Manufacturer{
  // name - название
  string name = 1;

  // country - страна производства
  string country = 2;

  // website - сайт производителя
  string website = 3;
}

// Value - набор из разрешенных типов значений (oneOf)
message Value{
  oneof kind{
    // string_value - строковое значение
    string string_value = 1;

    // string_value - целое значение
    int64 int64_value = 2;

    // string_value - дробное значение
    double double_value = 3;

    // string_value - логическое значение
    bool bool_value = 4;
  }
}

// PartsFilter - структура, представляющая фильтр по деталям (все поля опциональны)
message PartsFilter{
  // uuids - фильтр по uuid
  repeated  string uuids = 1;

  // names - фильтр по names
  repeated  string names = 2;

  // categories - фильтр по categories
  repeated  CATEGORY categories = 3;

  // manufacturer_countries - фильтр по manufacturer_countries
  repeated  string manufacturer_countries = 4;

  // tags - фильтр по tags
  repeated  string tags = 5;
}
